const DoubleLinkedList = require('./DoubleLinkedList')
const Node = require('./Node')

describe('Double Link List', () => {

  let dll

  beforeEach(() => {
    dll = new DoubleLinkedList()
  })
  
  test('Integrity', () => {
    expect(dll.head).toBe(null)
    expect(dll.tail).toBe(null)
    expect(dll.length).toBe(0)
  })
  
  test('Push', () => {
    dll.push(0)
    dll.push(1)
    dll.push(2)
    dll.push(3)
    expect(dll.head.val).toBe(0)
    expect(dll.tail.val).toBe(3)
    expect(dll.length).toBe(4)
  })
  
  test('Pop', () => {
    dll.push(0)
    dll.push(1)
    dll.push(2)
    dll.push(3)
    expect(dll.head.val).toBe(0)
    expect(dll.pop()).toEqual(new Node(3))
    expect(dll.pop()).toEqual(new Node(2))
    expect(dll.tail.val).toBe(1)
    expect(dll.length).toBe(2)
  })

  test('Shift', () => {
    expect(dll.shift()).toBe(undefined)
    dll.push('a')
    dll.push('b')
    dll.push('c')
    expect(dll.shift()).toEqual(new Node('a'))
    expect(dll.shift()).toEqual(new Node('b'))
    expect(dll.head.val).toBe('c')
    expect(dll.tail.val).toBe('c')
    expect(dll.length).toBe(1)
  })

  test('Unshift', () => {
    expect(dll.head).toBe(null)
    expect(dll.tail).toBe(null)
    expect(dll.length).toBe(0)
    dll.unshift('a')
    expect(dll.head.val).toBe('a')
    expect(dll.tail.val).toBe('a')
    expect(dll.length).toBe(1)
    dll.push('b')
    dll.push('c')
    dll.push('d')
    dll.unshift('z')
    expect(dll.head.val).toBe('z')
    expect(dll.length).toBe(5)
  })

  test('Get', () => {
    dll.push('a')
    dll.push('b')
    dll.push('c')
    dll.push('d')
    dll.push('e')
    dll.push('f')
    dll.push('g')
    dll.push('h')
    expect(dll.get(0).val).toBe('a')
    expect(dll.get(1).val).toBe('b')
    expect(dll.get(2).val).toBe('c')
    expect(dll.get(3).val).toBe('d')
    expect(dll.get(4).val).toBe('e')
    expect(dll.get(5).val).toBe('f')
    expect(dll.get(6).val).toBe('g')
    expect(dll.get(7).val).toBe('h')
    expect(dll.get(8)).toBe(null)
    expect(dll.get(999)).toBe(null)
  })

  test('Set', () => {
    dll.push('a')
    dll.push('b')
    dll.push('c')
    dll.push('d')
    dll.push('e')
    dll.push('f')
    dll.push('g')
    dll.push('h')
    expect(dll.set(3, 'D')).toBe(true)
    expect(dll.get(2).val).toBe('c')
    expect(dll.get(3).val).toBe('D')
    expect(dll.set(8, 'zzz')).toBe(false)
  })

  test('Insert', () => {
    dll.push('a')
    dll.push('b')
    dll.push('c')
    dll.push('d')
    dll.push('e')
    dll.push('f')
    dll.push('g')
    dll.push('h')
    expect(dll.insert(3, 'cc')).toBe(true)
    expect(dll.get(2).val).toBe('c')
    expect(dll.get(3).val).toBe('cc')
    expect(dll.get(4).val).toBe('d')
    expect(dll.insert(9, 'zzz')).toBe(false)
  })
  
  test('Remove', () => {
    expect(dll.remove(-1)).toBe(undefined)
    dll.push('a')
    dll.push('b')
    dll.push('c')
    dll.push('d')
    dll.push('e')
    dll.push('f')
    dll.push('g')
    dll.push('h')
    expect(dll.remove(3)).toEqual(new Node('d'))
    expect(dll.get(2).val).toBe('c')
    expect(dll.get(3).val).toBe('e')
    expect(dll.get(4).val).toBe('f')
    expect(dll.remove(9)).toBe(undefined)
  })
  
  test('Reverse', () => {
    dll.push('a')
    dll.push('b')
    dll.push('c')
    dll.push('d')
    dll.push('e')
    dll.push('f')
    dll.push('g')
    dll.push('h')
    dll.reverse()
    let dll2 = new DoubleLinkedList()
    dll2.push('h')
    dll2.push('g')
    dll2.push('f')
    dll2.push('e')
    dll2.push('d')
    dll2.push('c')
    dll2.push('b')
    dll2.push('a')
    expect(dll).toEqual(dll2)
    dll.print()
    dll2.print()
  })

})